//studio/supabase/schema.sq
-- Create a table for public user profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  name text,
  email text unique,
  height_cm numeric,
  weight_kg numeric,
  age int,
  sex text,
  activity_level text,
  body_fat_percentage numeric,
  athlete_type text,
  primary_goal text,
  macro_targets jsonb,
  dietary_preferences text[],
  allergens text[],
  meal_structure jsonb,
  dashboard_settings jsonb,
  favorite_recipe_ids int[],
  subscription_status text,
  plan_name text,
  subscription_start_date timestamp with time zone,
  subscription_end_date timestamp with time zone,
  subscription_duration text,
  
  constraint email_length check (char_length(email) >= 3)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, name)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Table for user-created custom recipes
create table recipes (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text not null,
  description text,
  image text,
  servings integer not null default 1,
  prep_time text,
  cook_time text,
  chill_time text,
  ingredients text[] not null,
  macros_per_serving jsonb,
  instructions text[] not null,
  tags text[]
);
alter table recipes enable row level security;
create policy "Users can view their own recipes." on recipes for select using (auth.uid() = user_id);
create policy "Users can insert their own recipes." on recipes for insert with check (auth.uid() = user_id);
create policy "Users can update their own recipes." on recipes for update using (auth.uid() = user_id);
create policy "Users can delete their own recipes." on recipes for delete using (auth.uid() = user_id);

-- Table for meal plan entries
create table meal_plan_entries (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references auth.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    recipe_id bigint not null,
    meal_date date not null,
    meal_type text not null,
    servings numeric not null
);
alter table meal_plan_entries enable row level security;
create policy "Users can manage their own meal plan." on meal_plan_entries for all using (auth.uid() = user_id);

-- Table for pantry items
create table pantry_items (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references auth.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    name text not null,
    quantity numeric not null,
    unit text not null,
    category text,
    expiry_date date,
    constraint pantry_items_user_id_name_unit_key unique (user_id, name, unit)
);
alter table pantry_items enable row level security;
create policy "Users can manage their own pantry." on pantry_items for all using (auth.uid() = user_id);

-- Table for shopping list items
create table shopping_list_items (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references auth.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    name text not null,
    quantity numeric not null,
    unit text not null,
    category text,
    purchased boolean default false,
    recipes jsonb,
    constraint shopping_list_items_user_id_name_unit_key unique (user_id, name, unit)
);
alter table shopping_list_items enable row level security;
create policy "Users can manage their own shopping list." on shopping_list_items for all using (auth.uid() = user_id);
