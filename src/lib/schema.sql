-- Supabase SQL schema for MealPlannerPro

-- Enable RLS
alter default privileges in schema public grant all on tables to postgres, anon, authenticated, service_role;
alter default privileges in schema public grant all on functions to postgres, anon, authenticated, service_role;
alter default privileges in schema public grant all on sequences to postgres, anon, authenticated, service_role;

-- Create the user_profiles table
create table if not exists public.user_profiles (
  id uuid not null primary key,
  updated_at timestamp with time zone,
  email text unique,
  name text,
  height_cm double precision,
  weight_kg double precision,
  age integer,
  sex text,
  activity_level text,
  training_experience_level text,
  body_fat_percentage double precision,
  neck_circumference_cm double precision,
  abdomen_circumference_cm double precision,
  waist_circumference_cm double precision,
  hip_circumference_cm double precision,
  primary_goal text,
  target_weight_change_rate_kg double precision,
  tdee double precision,
  lean_body_mass_kg double precision,
  has_accepted_terms boolean default false,
  last_check_in_date date,
  subscription_status text,
  
  constraint email_length check (char_length(email) <= 255),
  constraint name_length check (char_length(name) <= 255)
);

-- Set up RLS for user_profiles
alter table public.user_profiles enable row level security;
create policy "Users can view and update their own profile." on public.user_profiles
  for all using (auth.uid() = id) with check (auth.uid() = id);

-- Function to create a profile when a new user signs up
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.user_profiles (id, email, name)
  values (new.id, new.email, new.raw_user_meta_data->>'name');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger for the function
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Recipes table
create table if not exists public.recipes (
  id bigint generated by default as identity primary key,
  user_id uuid references public.user_profiles on delete cascade,
  name text not null,
  description text,
  image text,
  servings integer not null default 1,
  prep_time text,
  cook_time text,
  chill_time text,
  ingredients text[],
  instructions text[],
  tags text[],
  is_custom boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.recipes enable row level security;
create policy "Users can manage their own recipes" on public.recipes for all
    using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Macros table (linked to recipes)
create table if not exists public.macros (
  recipe_id bigint not null primary key references public.recipes on delete cascade,
  calories double precision,
  protein double precision,
  carbs double precision,
  fat double precision
);
alter table public.macros enable row level security;
create policy "Users can manage macros for their recipes" on public.macros for all
    using (exists (select 1 from recipes where recipes.id = macros.recipe_id and recipes.user_id = auth.uid()))
    with check (exists (select 1 from recipes where recipes.id = macros.recipe_id and recipes.user_id = auth.uid()));
    
-- Micronutrients table (linked to recipes)
create table if not exists public.micronutrients (
    recipe_id bigint not null primary key references public.recipes on delete cascade,
    iron double precision,
    calcium double precision,
    potassium double precision,
    vitamin_a double precision,
    vitamin_c double precision,
    vitamin_d double precision
);
alter table public.micronutrients enable row level security;
create policy "Users can manage micronutrients for their recipes" on public.micronutrients for all
    using (exists (select 1 from recipes where recipes.id = micronutrients.recipe_id and recipes.user_id = auth.uid()))
    with check (exists (select 1 from recipes where recipes.id = micronutrients.recipe_id and recipes.user_id = auth.uid()));


-- Meal Plan table
create table if not exists public.meal_plan (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.user_profiles on delete cascade,
  recipe_id bigint not null references public.recipes on delete cascade,
  date date not null,
  meal_type text not null,
  servings double precision not null,
  status text default 'planned'
);
alter table public.meal_plan enable row level security;
create policy "Users can manage their own meal plan" on public.meal_plan for all
    using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Pantry Items table
create table if not exists public.pantry_items (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.user_profiles on delete cascade,
  name text not null,
  quantity double precision not null,
  unit text not null,
  category text,
  expiry_date date
);
alter table public.pantry_items enable row level security;
create policy "Users can manage their own pantry items" on public.pantry_items for all
    using (auth.uid() = user_id) with check (auth.uid() = user_id);
    
-- Daily Logs (combines weight, wellness, vitals)
create table if not exists public.daily_logs (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.user_profiles on delete cascade,
    date date not null,
    weight_kg double precision,
    trend_weight_kg double precision,
    sleep_quality integer,
    energy_level text,
    cravings_level integer,
    muscle_soreness text,
    activity_yesterday text,
    notes text,
    manual_calories double precision,
    manual_protein double precision,
    manual_carbs double precision,
    manual_fat double precision,
    
    unique(user_id, date) -- ensure only one log entry per user per day
);
alter table public.daily_logs enable row level security;
create policy "Users can manage their own daily logs" on public.daily_logs for all
    using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- User Settings (JSONB column for flexible settings)
create table if not exists public.user_settings (
    user_id uuid not null primary key references public.user_profiles on delete cascade,
    dietary_preferences text[],
    allergens text[],
    macro_targets jsonb,
    meal_structure jsonb,
    dashboard_settings jsonb,
    favorite_recipe_ids bigint[]
);
alter table public.user_settings enable row level security;
create policy "Users can manage their own settings" on public.user_settings for all
    using (auth.uid() = user_id) with check (auth.uid() = user_id);
